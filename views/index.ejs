<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DTConnect</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background-color: transparent;
            color: #fff;
            font-family: 'Inter', sans-serif;
            overflow-x: hidden;
            height: 100vh;
            display: flex;
            flex-direction: column;
        }

        #map {
            width: 100%;
            height: 100vh;
            position: absolute;
            top: 0;
            left: 0;
            z-index: 1;
        }

        .container {
            display: flex;
            flex-direction: column;
            height: 100vh;
            position: relative;
            z-index: 2;
        }

        .page {
            display: none;
            flex-direction: column;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 3;
        }

        .page.active {
            display: flex;
        }

        .leaflet-control-attribution {
            display: none;
        }

        .bus-label-container {
            display: block;
            text-align: center;
            pointer-events: none;
            transform: translate(-50%, -50%);
        }

        .bus-label {
            background: rgba(0, 0, 0, 0.7);
            border: 1px solid #fff;
            padding: 2px 4px;
            font-size: 8px;
            font-weight: bold;
            text-align: center;
            border-radius: 4px;
            color: #fff;
            opacity: 1;
            transition: opacity 0.3s ease;
            width: 60px;
            display: inline-block;
            line-height: 10px;
        }

        .bus-label .bus-no {
            font-size: 6px;
        }

        .bus-dot {
            border-radius: 50%;
            pointer-events: none;
            box-shadow: 0 0 3px rgba(0, 0, 0, 0.5);
            transition: transform 1s ease;
        }

        .stop-counter {
            width: 60px;
            height: 8px;
            background: #444;
            border-radius: 4px;
            margin-top: 2px;
            pointer-events: none;
            position: relative;
            overflow: hidden;
            border: 1px solid #666;
        }

        .stop-bar {
            height: 100%;
            background: #fff;
            transition: width 0.3s ease;
            border-radius: 3px 0 0 3px;
        }

        .floating-circles {
            position: absolute;
            width: 100%;
            display: flex;
            justify-content: center;
            gap: 10px;
            z-index: 5;
            transition: bottom 0.5s ease;
            bottom: 90px; /* Slightly above navbar when collapsed (70px + 20px gap) */
        }

        .floating-circles.navbar-expanded {
            bottom: 510px; /* Above expanded navbar (500px + 10px gap) */
        }

        .bubble-circle {
            background: #fff;
            border-radius: 50%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            color: #000;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
            cursor: pointer;
            transition: transform 0.3s ease, box-shadow 0.3s ease, background-color 0.3s ease;
            padding: 8px;
            width: 100px;
            height: 100px;
            min-width: 100px;
            min-height: 100px;
            aspect-ratio: 1;
            overflow: hidden;
            animation: floating 10s infinite ease-in-out;
        }

        .bubble-circle.center {
            width: 110px;
            height: 110px;
            min-width: 110px;
            min-height: 110px;
        }

        .bubble-circle.side {
            width: 80px;
            height: 80px;
            min-width: 80px;
            min-height: 80px;
        }

        .bubble-circle.clicked {
            transform: scale(1.1);
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.4);
        }

        .bubble-circle.clicked.popped {
            transform: scale(1);
        }

        .bubble-circle.at-stop {
            background-color: #d8ffbe;
        }

        .bubble-circle .route-name {
            font-size: 0.8rem;
            font-weight: 600;
            margin-bottom: 2px;
            text-overflow: ellipsis;
            white-space: nowrap;
            overflow: hidden;
            width: 90%;
        }

        .bubble-circle.side .route-name {
            font-size: 0.7rem;
        }

        .bubble-circle .bus-no {
            font-size: 1rem;
            font-weight: 600;
            margin-bottom: 2px;
            text-overflow: ellipsis;
            white-space: nowrap;
            overflow: hidden;
            width: 90%;
        }

        .bubble-circle.side .bus-no {
            font-size: 0.8rem;
        }

        .bubble-circle .distance {
            font-size: 0.7rem;
            color: #555;
            text-overflow: ellipsis;
            white-space: nowrap;
            overflow: hidden;
            width: 90%;
        }

        .bubble-circle.side .distance {
            font-size: 0.6rem;
        }

        @media (max-width: 768px) {
            .bubble-circle {
                width: 80px;
                height: 80px;
                min-width: 80px;
                min-height: 80px;
                padding: 6px;
            }
            .bubble-circle.center {
                width: 90px;
                height: 90px;
                min-width: 90px;
                min-height: 90px;
            }
            .bubble-circle.side {
                width: 70px;
                height: 70px;
                min-width: 70px;
                min-height: 70px;
            }
            .bubble-circle .route-name {
                font-size: 0.7rem;
            }
            .bubble-circle.side .route-name {
                font-size: 0.6rem;
            }
            .bubble-circle .bus-no {
                font-size: 0.9rem;
            }
            .bubble-circle.side .bus-no {
                font-size: 0.7rem;
            }
            .bubble-circle .distance {
                font-size: 0.6rem;
            }
            .bubble-circle.side .distance {
                font-size: 0.5rem;
            }
            .floating-circles {
                gap: 8px;
            }
        }

        @media (max-width: 480px) {
            .bubble-circle {
                width: 80px;
                height: 80px;
                min-width: 80px;
                min-height: 80px;
                padding: 4px;
            }
            .bubble-circle.center {
                width: 110px;
                height: 110px;
                min-width: 110px;
                min-height: 110px;
            }
            .bubble-circle.side {
                width: 80px;
                height: 80px;
                min-width: 80px;
                min-height: 80px;
            }
            .bubble-circle .route-name {
                font-size: 0.6rem;
            }
            .bubble-circle.side .route-name {
                font-size: 0.5rem;
            }
            .bubble-circle .bus-no {
                font-size: 0.8rem;
            }
            .bubble-circle.side .bus-no {
                font-size: 0.6rem;
            }
            .bubble-circle .distance {
                font-size: 0.5rem;
            }
            .bubble-circle.side .distance {
                font-size: 0.4rem;
            }
            .floating-circles {
                gap: 6px;
            }
        }

        @keyframes floating {
            from { transform: translate(0, 0px); }
            65%  { transform: translate(0, 5px); }
            to   { transform: translate(0, 0px); }
        }

        .bottom-navbar {
            background: #111;
            padding: 10px;
            border-radius: 12px;
            box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.5);
            z-index: 3;
            width: 98%;
            margin: 0 auto;
            transition: height 0.5s ease;
            position: absolute;
            bottom: 0;
            left: 1%;
        }

        .bottom-navbar.collapsed {
            height: 70px;
        }

        .bottom-navbar.expanded {
            height: 500px;
            max-height: 500px;
            overflow-y: auto;
        }

        .navbar-toggle {
            background: #111;
            padding: 10px;
            border-radius: 12px;
            cursor: pointer;
            display: flex;
            justify-content: center;
        }

        .navbar-icons {
            display: flex;
            gap: 15px;
        }

        .navbar-icon {
            width: 24px;
            height: 24px;
            color: #fff;
            cursor: pointer;
            transition: color 0.3s ease;
        }

        .navbar-icon:hover {
            color: #ccc;
        }

        .bus-table {
            width: 100%;
            background: #222;
            color: #fff;
            border-collapse: collapse;
        }

        .bus-table th,
        .bus-table td {
            padding: 10px;
            border-bottom: 1px solid #333;
            text-align: left;
        }

        .bus-table th {
            background: #333;
        }

        .navbar-content {
            padding: 10px;
        }

        .ride-detail {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 10px 0;
            color: #fff;
        }

        .ride-detail .time {
            font-size: 1.2rem;
            font-weight: 600;
        }

        .ride-detail .arrival-time {
            font-size: 0.9rem;
            color: #ccc;
            margin-left: 5px;
        }

        .ride-detail .address {
            font-size: 0.9rem;
            color: #ccc;
            flex-grow: 1;
            margin: 0 10px;
        }

        .ride-detail .change-btn {
            background: transparent;
            border: 1px solid #fff;
            color: #fff;
            padding: 5px 12px;
            border-radius: 8px;
            font-size: 0.8rem;
            font-weight: 600;
            cursor: pointer;
            transition: border-color 0.3s ease, color 0.3s ease;
        }

        .ride-detail .change-btn:hover {
            border-color: #ccc;
            color: #ccc;
        }

        .ride-dot {
            width: 10px;
            height: 10px;
            background: #fff;
            border-radius: 50%;
            margin: 0 5px;
        }

        .ride-dot::after {
            content: '';
            width: 2px;
            height: 20px;
            background: #666;
            position: absolute;
            left: 4px;
            top: 10px;
        }

        .ticket-form {
            display: none;
            padding: 10px;
        }

        .ticket-form.active {
            display: block;
        }

        .ticket-form label {
            font-size: 1rem;
            font-weight: 600;
            margin-bottom: 5px;
            display: block;
        }

        .ticket-form input {
            width: 100%;
            padding: 12px;
            margin: 10px 0;
            background: #222;
            border: 1px solid #333;
            border-radius: 8px;
            color: #fff;
            font-size: 1rem;
        }

        .ticket-form input:focus {
            outline: none;
            border-color: #fff;
        }

        .input-row {
            display: flex;
            gap: 10px;
        }

        .input-row input {
            flex: 1;
        }

        .ticket-form .btn {
            display: block;
            margin: 20px auto;
            width: 200px;
            padding: 12px 24px;
            background: linear-gradient(90deg, #4CAF50, #2E7D32);
            color: #fff;
            font-size: 1.1rem;
            font-weight: 600;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            text-decoration: none;
            text-align: center;
        }

        .ticket-form .btn:hover {
            transform: scale(1.05);
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.3);
        }

        .stop-dropdown {
            position: absolute;
            background: #222;
            border: 1px solid #333;
            border-radius: 8px;
            max-height: 200px;
            overflow-y: auto;
            width: 100%;
            z-index: 5;
            display: none;
        }

        .stop-dropdown.active {
            display: block;
        }

        .stop-item {
            padding: 10px;
            cursor: pointer;
            color: #fff;
        }

        .stop-item:hover {
            background: #333;
        }

        .bus-arrival {
            font-size: 1rem;
            color: #ccc;
            margin-bottom: 10px;
            text-align: center;
        }

        .hamburger-btn {
            position: fixed;
            top: 20px;
            right: 20px;
            width: 40px;
            height: 40px;
            background: #111;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            z-index: 100;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
        }

        .side-navbar {
            position: fixed;
            top: 0;
            right: -300px;
            width: 300px;
            height: 100%;
            background: #111;
            padding: 20px;
            z-index: 99;
            transition: right 0.3s ease;
        }

        .side-navbar.active {
            right: 0;
        }

        .side-navbar h3 {
            font-size: 1.5rem;
            margin-bottom: 20px;
        }

        .side-navbar ul {
            list-style: none;
        }

        .side-navbar li {
            padding: 15px 0;
            font-size: 1.1rem;
            cursor: pointer;
        }

        .side-navbar li:hover {
            color: #ccc;
        }

        .qr-btn {
            position: fixed;
            top: 20px;
            left: 20px;
            width: 40px;
            height: 40px;
            background: #111;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            z-index: 100;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
        }

        .qr-scanner {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 90%;
            max-width: 400px;
            height: 500px;
            background: #fff;
            border-radius: 12px;
            z-index: 10001;
            overflow: hidden;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
        }

        .qr-scanner.active {
            display: flex;
        }

        .qr-scanner .scanner-box {
            width: 100%;
            height: 60%;
            position: relative;
            margin-bottom: 20px;
        }

        .qr-scanner video {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 8px;
        }

        .qr-scanner .scan-line {
            position: absolute;
            width: 100%;
            height: 2px;
            background: #0f0;
            top: 0;
            animation: scan 2s infinite linear;
        }

        .qr-scanner .manual-entry {
            width: 100%;
            text-align: center;
            margin-top: 10px;
        }

        .qr-scanner .manual-entry h3 {
            font-size: 1.2rem;
            margin-bottom: 10px;
            color: #000;
        }

        .qr-scanner .bus-number-buttons {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 10px;
            margin-bottom: 20px;
        }

        .qr-scanner .bus-number-btn {
            background: #e0e0e0;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            font-size: 1rem;
            color: #333;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .qr-scanner .bus-number-btn:hover {
            background: #d0d0d0;
        }

        .qr-scanner .number-inputs {
            display: flex;
            justify-content: center;
            gap: 10px;
        }

        .qr-scanner .number-input {
            width: 40px;
            height: 40px;
            background: #e0e0e0;
            border: none;
            border-radius: 8px;
            font-size: 1.2rem;
            text-align: center;
            color: #333;
        }

        .qr-scanner .number-input:focus {
            outline: none;
            border: 2px solid #4CAF50;
        }

        @keyframes scan {
            0% { top: 0; }
            50% { top: 100%; }
            100% { top: 0; }
        }

        .nearest-bus-overlay {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            width: 200px;
            height: 40px;
            background: #fff;
            border-radius: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 100;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
            color: #000;
            padding: 0 15px;
            font-size: 1rem;
            font-weight: 600;
            transition: transform 0.5s ease, width 0.5s ease, height 0.5s ease, left 0.5s ease;
            cursor: pointer;
        }

        .nearest-bus-overlay.hamburger-active {
            left: 70px;
            transform: translateX(0);
            width: 40px;
            height: 40px;
            background: #fff;
            border-radius: 50%;
            padding: 0;
        }

        .nearest-bus-overlay.hamburger-active .nearest-bus-stop-text {
            display: none;
        }

        .nearest-bus-overlay.hamburger-active .location-pin {
            display: block;
        }

        .nearest-bus-overlay .nearest-bus-stop-text {
            display: block;
        }

        .nearest-bus-overlay .location-pin {
            display: none;
            width: 24px;
            height: 24px;
        }

        .nearest-bus-overlay.hamburger-active .location-pin svg {
            stroke: #000;
        }

        .nearest-bus-overlay:hover {
            transform: translateX(-50%) scale(1.05);
        }

        .nearest-bus-dropdown {
            display: none;
            position: absolute;
            top: 50px;
            left: 50%;
            transform: translateX(-50%);
            width: 200px;
            background: #222;
            border: 1px solid #333;
            border-radius: 8px;
            padding: 10px;
            z-index: 101;
            max-height: 200px;
            overflow-y: auto;
        }

        .nearest-bus-dropdown.active {
            display: block;
        }

        .nearest-bus-option {
            padding: 8px;
            color: #fff;
            cursor: pointer;
        }

        .nearest-bus-option:hover {
            background: #333;
        }

        .ticket-form .btn.upi-pay1 {
            text-decoration: none;
            display: flex;
            justify-content: center;
            align-items: center;
        }
    </style>
</head>

<body>
    <div class="container">
        <div id="map"></div>
        <!-- Floating Circles -->
        <div class="floating-circles" id="floatingCircles">
            <div class="bubble-circle side" data-bus-no=""></div>
            <div class="bubble-circle center" data-bus-no=""></div>
            <div class="bubble-circle side" data-bus-no=""></div>
        </div>

        <!-- Bottom Navbar -->
        <div class="bottom-navbar collapsed" id="bottomNavbar">
            <div class="navbar-toggle" onclick="toggleNavbar('toggle')">
                <div class="navbar-icons">
                    <svg xmlns="http://www.w3.org/2000/svg" class="navbar-icon lucide lucide-chevron-up" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="18 15 12 9 6 15"></polyline></svg>
                    <svg xmlns="http://www.w3.org/2000/svg" class="navbar-icon lucide lucide-map-pin" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" onclick="requestUserLocation(); filterContent('location')"><path d="M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"></path><circle cx="12" cy="10" r="3"></circle></svg>
                    <svg xmlns="http://www.w3.org/2000/svg" class="navbar-icon lucide lucide-bus" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" onclick="toggleNavbar('buses'); filterContent('buses')"><path d="M8 6v6"></path><path d="M15 6v6"></path><path d="M2 12h19.6"></path><path d="M18 18h3s.5-1.7.8-2.8c.1-.4.2-.8.2-1.2 0-.4-.1-.8-.2-1.2l-1.4-5C20.1 6.8 19.1 6 18 6H4a2 2 0 0 0-2 2v10h3"></path><circle cx="7" cy="18" r="2"></circle><path d="M9 18h5"></path><circle cx="16" cy="18" r="2"></circle></svg>
                </div>
            </div>
            <div class="navbar-content" id="navbarContent">
                <h3 style="font-size: 1.5rem; margin-bottom: 10px;">Next bus</h3>
                <div id="rideDetails" class="ride-detail">
                    <div class="ride-dot"></div>
                    <span class="time" id="nextBusTime">Loading...</span>
                    <span class="arrival-time" id="arrivalTime">Loading...</span>
                    <span class="address" id="nearestStopName">Loading...</span>
                    <button class="change-btn" id="routeNameBtn">Loading...</button>
                </div>
                <div id="busesContent" class="content-section" style="display: none;">
                    <div class="bus-arrival" id="busArrival">Calculating next bus arrival...</div>
                    <table class="bus-table" id="nearestBusesTable">
                        <thead>
                            <tr>
                                <th>Bus No</th>
                                <th>Route Name</th>
                                <th>Distance</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
                <div id="locationContent" class="content-section" style="display: none;">
                    <div class="data">
                        <h3>Nearest Stop: Loading...</h3>
                        <h3>Nearest Buses: Loading...</h3>
                    </div>
                </div>
                <div id="ticketContent" class="content-section ticket-form" style="display: none;">
                    <label for="ticketSourceStop">Picking you up from</label>
                    <div style="position: relative;">
                        <input type="text" id="ticketSourceStop" placeholder="Source stop" />
                        <div class="stop-dropdown" id="sourceStopDropdown"></div>
                    </div>
                    <label for="ticketDropStop">Destination</label>
                    <div style="position: relative;">
                        <input type="text" id="ticketDropStop" placeholder="Enter destination stop" />
                        <div class="stop-dropdown" id="dropStopDropdown"></div>
                    </div>
                    <div class="input-row">
                        <div>
                            <label for="ticketBusNo">Bus Number</label>
                            <input type="text" id="ticketBusNo" placeholder="Bus Number" readonly />
                        </div>
                        <div>
                            <label for="ticketRouteName">Route Name</label>
                            <input type="text" id="ticketRouteName" placeholder="Route Name" />
                        </div>
                    </div>
                    <a href="upi://pay?pa=avs.vash@okaxis&pn=DTC&cu=INR&am=13.85" class="btn upi-pay1">Pay with UPI</a>
                </div>
            </div>
        </div>

        <!-- Hamburger Button -->
        <div class="hamburger-btn" onclick="toggleSideNavbar()">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#fff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line></svg>
        </div>

        <!-- Nearest Bus Overlay -->
        <div class="nearest-bus-overlay" id="nearestBusOverlay">
            <span class="nearest-bus-stop-text" id="nearestBusStop">Loading...</span>
            <svg class="location-pin" viewBox="0 0 24 24" fill="none" stroke="#000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"/>
                <circle cx="12" cy="10" r="3" fill="#fff"/>
            </svg>
            <div class="nearest-bus-dropdown" id="nearestBusDropdown"></div>
        </div>

        <!-- QR Button -->
        <div class="qr-btn" onclick="openQRScanner()">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#fff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 3h7v7H3z"/><path d="M14 3h7v7h-7z"/><path d="M14 14h7v7h-7z"/><path d="M3 14h7v7H3z"/><path d="M10 10h4v4h-4z"/></svg>
        </div>

        <!-- Side Navbar -->
        <div class="side-navbar" id="sideNavbar">
            <h3>Menu</h3>
            <ul>
                <li>Previous Bookings</li>
                <li>Total Savings</li>
                <li>Profile</li>
                <li>Support</li>
                <li>Settings</li>
            </ul>
        </div>

        <!-- QR Scanner and Manual Entry Modal -->
        <div class="qr-scanner" id="qrScanner">
            <div class="scanner-box">
                <video id="qrVideo" autoplay playsinline></video>
                <div class="scan-line"></div>
            </div>
            <div class="manual-entry">
                <h3>Enter bus number</h3>
                <div class="bus-number-buttons">
                    <button class="bus-number-btn" onclick="selectBusNumber('DL1PB')">DL1PB</button>
                    <button class="bus-number-btn" onclick="selectBusNumber('DL1PC')">DL1PC</button>
                    <button class="bus-number-btn" onclick="selectBusNumber('DL1PD')">DL1PD</button>
                    <button class="bus-number-btn" onclick="selectBusNumber('DL51GD')"><span>DL51GD</span><span>⚡</span></button>
                    <button class="bus-number-btn" onclick="selectBusNumber('DL51EV')"><span>DL51EV</span><span>⚡</span></button>
                </div>
                <div class="number-inputs">
                    <input type="text" class="number-input" id="num1" maxlength="1" />
                    <input type="text" class="number-input" id="num2" maxlength="1" />
                    <input type="text" class="number-input" id="num3" maxlength="1" />
                    <input type="text" class="number-input" id="num4" maxlength="1" />
                </div>
                <button class="btn" onclick="submitBusNumber()">Proceed</button>
            </div>
        </div>

        <!-- Booking Confirmation Modal -->
        <div class="modal" id="bookingModal">
            <h3>Booking Confirmed!</h3>
            <p id="modalDetails">Your ride has been booked successfully.</p>
            <button class="btn" onclick="closeBookingModal()">Done</button>
        </div>

    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const map = L.map('map', {
            center: [28.6139, 77.2090],
            zoom: 12,
            zoomControl: false
        });

        L.tileLayer('https://{s}.tile.jawg.io/jawg-streets/{z}/{x}/{y}{r}.png?access-token=yY3fr8FU86SQBCMHs2a8Fk3X3ef9sOjQ5yZspu3Bl16bSAjGC6dx4evddIDcMxG5', {
            attribution: '<a href="https://jawg.io" title="Tiles Courtesy of Jawg Maps" target="_blank">© <b>Jawg</b>Maps</a> © <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
            minZoom: 0,
            maxZoom: 22,
            subdomains: 'abcd'
        }).addTo(map);

        document.addEventListener('DOMContentLoaded', () => {
            updateCirclesPosition();
            initializeCircles();
            map.invalidateSize();
            initializeLocation();
            fetchAllStops();
        });

        const stopIcon = L.divIcon({
            className: 'bus-stop-icon',
            html: '<svg xmlns="http://www.w3.org/2000/svg" height="12" width="13.5" viewBox="0 0 576 512"><path fill="#ff0000" d="M288 0C422.4 0 512 35.2 512 80l0 16 0 32c17.7 0 32 14.3 32 32l0 64c0 17.7-14.3 32-32 32l0 160c0 17.7-14.3 32-32 32l0 32c0 17.7-14.3 32-32 32l-32 0c-17.7 0-32-14.3-32-32l0-32-192 0 0 32c0 17.7-14.3 32-32 32l-32 0c-17.7 0-32-14.3-32-32l0-32c-17.7 0-32-14.3-32-32l0-160c-17.7 0-32-14.3-32-32l0-64c0-17.7 14.3-32 32-32c0 0 0 0 0 0l0-32s0 0 0 0l0-16C64 35.2 153.6 0 288 0zM128 160l0 96c0 17.7 14.3 32 32 32l112 0 0-160-112 0c-17.7 0-32 14.3-32 32zM304 288l112 0c17.7 0 32-14.3 32-32l0-96c0-17.7-14.3-32-32-32l-112 0 0 160zM144 400a32 32 0 1 0 0-64 32 32 0 1 0 0 64zm288 0a32 32 0 1 0 0-64 32 32 0 1 0 0 64zM384 80c0-8.8-7.2-16-16-16L208 64c-8.8 0-16 7.2-16 16s7.2 16 16 16l160 0c8.8 0 16-7.2 16-16z"/></svg>',
            iconSize: [25, 25],
            iconAnchor: [12.5, 25],
            popupAnchor: [0, -25]
        });

        const userIcon = L.divIcon({
            className: 'user-location-icon',
            html: '<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="#000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="5"></circle></svg>',
            iconSize: [35, 35],
            iconAnchor: [17.5, 17.5],
            popupAnchor: [0, 0]
        });

        let userMarker = null;
        const busMarkers = {};
        const stopCircles = {};
        let allBuses = [];
        const busStopMarkers = {};
        let currentFilter = 'all';
        let hasGeoPermission = false;
        const ZOOM_THRESHOLD = 14;
        const BUS_LABEL_SIZE = [60, 18];
        let nearestStops = [];
        let circleElements = [];
        let allStops = [];

        const initialBuses = <%- JSON.stringify(buses) %> || [];
        let initialBusStops = <%- JSON.stringify(busStops) %> || [];

        function calculateDistance(lat1, lon1, lat2, lon2) {
            const R = 6371000;
            const dLat = (lat2 - lat1) * Math.PI / 180;
            const dLon = (lon2 - lon1) * Math.PI / 180;
            const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
                Math.sin(dLon/2) * Math.sin(dLon/2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
            return R * c;
        }

        function calculateArrivalTime(busDistance) {
            const speedKmh = 30;
            const speedMs = speedKmh * 1000 / 3600;
            const timeSeconds = busDistance / speedMs;
            const timeMinutes = Math.round(timeSeconds / 60);
            const now = new Date();
            now.setMinutes(now.getMinutes() + timeMinutes);
            return { time: now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }), minutes: timeMinutes };
        }

        function findNearestLocations(userLat, userLon, buses, stops) {
            const stopsWithDistance = stops.map(stop => ({
                ...stop,
                distance: calculateDistance(userLat, userLon, stop.latitude, stop.longitude)
            })).sort((a, b) => a.distance - b.distance);

            const busesWithDistance = buses.map(bus => ({
                ...bus,
                distance: calculateDistance(userLat, userLon, bus.latitude, bus.longitude)
            })).sort((a, b) => a.distance - b.distance);

            nearestStops = stopsWithDistance.slice(0, 4);

            return {
                nearestStop: stopsWithDistance[0] || { name: 'Unknown', distance: 0 },
                nearestBuses: busesWithDistance.slice(0, 3),
                nearbyStops: stopsWithDistance.slice(0, 3)
            };
        }

        function updateCirclesPosition() {
            const navbar = document.getElementById('bottomNavbar');
            const circles = document.getElementById('floatingCircles');
            if (navbar.classList.contains('expanded')) {
                circles.classList.add('navbar-expanded');
            } else {
                circles.classList.remove('navbar-expanded');
            }
        }

        function initializeCircles() {
            const circlesDiv = document.getElementById('floatingCircles');
            circleElements = Array.from(circlesDiv.children);
            circleElements.forEach((circle, index) => {
                circle.innerHTML = `
                    <div class="route-name">Loading...</div>
                    <div class="bus-no">Loading...</div>
                    <div class="distance">Loading...</div>
                `;
                circle.onclick = (e) => {
                    e.preventDefault();
                    if (!circle.classList.contains('clicked')) {
                        circle.classList.add('clicked');
                        setTimeout(() => {
                            circle.classList.add('popped');
                            setTimeout(() => {
                                circle.classList.remove('clicked', 'popped');
                            }, 300);
                        }, 100);
                    }
                    const busNo = circle.getAttribute('data-bus-no');
                    const routeName = circle.querySelector('.route-name').textContent;
                    const nearestStopName = document.getElementById('nearestStopName').textContent;
                    showTicketForm(busNo, routeName, nearestStopName);
                    if (document.getElementById('bottomNavbar').classList.contains('collapsed')) {
                        toggleNavbar('ticket');
                    }
                };
            });
        }

        function updateNearestDisplay(nearestStop, nearestBuses, nearbyStops) {
            const displayElement = document.querySelector('#locationContent .data');
            let html = `
                <h3>Nearest Stop: ${nearestStop.name}</h3>
                <p>Distance: ${(nearestStop.distance / 1000).toFixed(2)} km</p>
                <h3>Nearest Buses:</h3>
                <ul style="list-style: none; padding: 0;">
            `;
            
            nearestBuses.forEach(bus => {
                html += `
                    <li>
                        Bus ${bus.busNo} (Route: ${bus.routeName})<br>
                        Distance: ${(bus.distance / 1000).toFixed(2)} km
                    </li>
                `;
            });
            
            html += '</ul>';
            displayElement.innerHTML = html;

            if (nearestBuses.length > 0) {
                const nearestBus = nearestBuses[0];
                const busDistance = calculateDistance(
                    nearestBus.latitude, nearestBus.longitude,
                    nearestStop.latitude, nearestStop.longitude
                );
                const { time, minutes } = calculateArrivalTime(busDistance);
                document.getElementById('busArrival').textContent = `Next bus will arrive in ${minutes} minutes`;
                document.getElementById('nextBusTime').textContent = time;
                document.getElementById('arrivalTime').textContent = `(in ${minutes} min)`;
                document.getElementById('nearestStopName').textContent = nearestStop.name;
                document.getElementById('routeNameBtn').textContent = nearestBus.routeName;
                document.getElementById('routeNameBtn').onclick = () => showTicketForm(nearestBus.busNo, nearestBus.routeName, nearestStop.name);
                document.getElementById('nearestBusStop').textContent = nearestStop.name;
            } else {
                document.getElementById('busArrival').textContent = 'No buses nearby';
                document.getElementById('nextBusTime').textContent = 'N/A';
                document.getElementById('arrivalTime').textContent = 'N/A';
                document.getElementById('nearestStopName').textContent = 'N/A';
                document.getElementById('routeNameBtn').textContent = 'N/A';
                document.getElementById('nearestBusStop').textContent = 'N/A';
            }

            const orderedBuses = [nearestBuses[1] || {}, nearestBuses[0] || {}, nearestBuses[2] || {}];
            circleElements.forEach((circle, index) => {
                const bus = orderedBuses[index] || {};
                circle.setAttribute('data-bus-no', bus.busNo || '');
                circle.querySelector('.route-name').textContent = bus.routeName || 'Loading...';
                circle.querySelector('.bus-no').textContent = bus.busNo || 'Loading...';
                circle.querySelector('.distance').textContent = bus.distance ? `${Math.round(bus.distance)} m` : 'Loading...';

                const isAtStop = nearestStop && bus.latitude && bus.longitude && 
                    calculateDistance(bus.latitude, bus.longitude, nearestStop.latitude, nearestStop.longitude) < 50;
                if (isAtStop) {
                    circle.classList.add('at-stop');
                } else {
                    circle.classList.remove('at-stop');
                }
            });

            if (currentFilter === 'buses') {
                const tableBody = document.querySelector('#nearestBusesTable tbody');
                tableBody.innerHTML = '';
                nearestBuses.forEach(bus => {
                    if (bus.busNo) {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${bus.busNo}</td>
                            <td>${bus.routeName}</td>
                            <td>${(bus.distance / 1000).toFixed(2)} km</td>
                        `;
                        tableBody.appendChild(row);
                    }
                });
            }

            updateCirclesPosition();
        }

        function generateStopCounter(stopsRemaining) {
            const percentage = (stopsRemaining / 10) * 100;
            return `
                <div class="stop-counter">
                    <div class="stop-bar" style="width: ${percentage}%"></div>
                </div>
            `;
        }

        function adjustMarkerOpacity(zoom) {
            const opacity = zoom > 16 ? 1 : zoom > 11 ? 0.9 : 0.4;
            Object.values(busMarkers).forEach(marker => {
                const element = marker.getElement();
                if (element && element.classList.contains('bus-label')) {
                    element.style.opacity = opacity;
                }
            });
        }

        function filterBusesInBounds(buses) {
            const bounds = map.getBounds();
            return buses.filter(bus => bounds.contains([bus.latitude, bus.longitude]));
        }

        function updateBusMarkers(buses, stops) {
            allBuses = buses;
            const visibleBuses = filterBusesInBounds(buses);
            const zoomLevel = map.getZoom();
            const useLabels = zoomLevel >= ZOOM_THRESHOLD;

            Object.keys(busMarkers).forEach(busNo => {
                if (!visibleBuses.find(bus => bus.busNo === busNo)) {
                    map.removeLayer(busMarkers[busNo]);
                    delete busMarkers[busNo];
                }
            });

            visibleBuses.forEach(bus => {
                const { busNo, latitude, longitude, routeNo, routeName, stopsRemaining = 0 } = bus;

                const counterHtml = generateStopCounter(stopsRemaining);
                const busDotIcon = L.divIcon({
                    className: 'bus-dot',
                    html: `<div style="width: 10px; height: 10px; background: #ff0000; border-radius: 50%;"></div>`,
                    iconSize: [10, 10],
                    iconAnchor: [5, 5]
                });

                if (busMarkers[busNo]) {
                    const marker = busMarkers[busNo];
                    const newLatLng = new L.LatLng(latitude, longitude);
                    animateMarker(marker, marker.getLatLng(), newLatLng);
                    if (useLabels) {
                        marker.setIcon(L.divIcon({
                            className: 'bus-label-container',
                            html: `<div class="bus-label">${routeName} (<span class="bus-no">${busNo}</span>)</div>${counterHtml}`,
                            iconSize: BUS_LABEL_SIZE,
                            iconAnchor: [BUS_LABEL_SIZE[0] / 2, BUS_LABEL_SIZE[1] / 2]
                        }));
                    } else {
                        marker.setIcon(busDotIcon);
                    }
                    marker.setPopupContent(`Bus: ${busNo}<br>Route: ${routeName}<br>Lat: ${latitude}<br>Lon: ${longitude}<br>Stops Remaining: ${stopsRemaining}`);
                } else {
                    const icon = useLabels ? L.divIcon({
                        className: 'bus-label-container',
                        html: `<div class="bus-label">${routeName} (<span class="bus-no">${busNo}</span>)</div>${counterHtml}`,
                        iconSize: BUS_LABEL_SIZE,
                        iconAnchor: [BUS_LABEL_SIZE[0] / 2, BUS_LABEL_SIZE[1] / 2]
                    }) : busDotIcon;

                    const marker = L.marker([latitude, longitude], { icon })
                        .addTo(map)
                        .bindPopup(`Bus: ${busNo}<br>Route: ${routeName}<br>Lat: ${latitude}<br>Lon: ${longitude}<br>Stops Remaining: ${stopsRemaining}`);

                    busMarkers[busNo] = marker;
                }
            });

            if (useLabels) {
                adjustMarkerOpacity(zoomLevel);
            }
        }

        function updateBusStopMarkers(stops) {
            const zoomLevel = map.getZoom();
            const bounds = map.getBounds();

            if (zoomLevel < ZOOM_THRESHOLD) {
                Object.keys(busStopMarkers).forEach(key => {
                    map.removeLayer(busStopMarkers[key]);
                    delete busStopMarkers[key];
                });
                return;
            }

            if (stops && stops.length > 0) {
                stops.forEach(stop => {
                    const { name, latitude, longitude } = stop;
                    const key = `${latitude},${longitude}`;

                    if (bounds.contains([latitude, longitude])) {
                        if (!busStopMarkers[key]) {
                            const marker = L.marker([latitude, longitude], { icon: stopIcon })
                                .addTo(map)
                                .bindPopup(`Stop: ${name}<br>Lat: ${latitude}<br>Lon: ${longitude}`);
                            busStopMarkers[key] = marker;
                        }
                    } else if (busStopMarkers[key]) {
                        map.removeLayer(busStopMarkers[key]);
                        delete busStopMarkers[key];
                    }
                });
                initialBusStops = stops;
            }
        }

        function animateMarker(marker, startLatLng, endLatLng) {
            let startTime = null;
            const duration = 1000;

            function animate(timestamp) {
                if (!startTime) startTime = timestamp;
                const progress = (timestamp - startTime) / duration;
                if (progress < 1) {
                    const lat = startLatLng.lat + (endLatLng.lat - startLatLng.lat) * progress;
                    const lng = startLatLng.lng + (endLatLng.lng - startLatLng.lng) * progress;
                    marker.setLatLng([lat, lng]);
                    requestAnimationFrame(animate);
                } else {
                    marker.setLatLng(endLatLng);
                }
            }
            requestAnimationFrame(animate);
        }

        function toggleNavbar(mode) {
            const navbar = document.getElementById('bottomNavbar');
            const arrowIcon = document.querySelector('.bottom-navbar .lucide-chevron-up');

            if (navbar.classList.contains('collapsed')) {
                navbar.classList.remove('collapsed');
                navbar.classList.add('expanded');
                arrowIcon.innerHTML = '<polyline points="18 9 12 15 6 9"></polyline>';
                if (mode !== 'ticket') {
                    filterContent(mode === 'toggle' ? 'buses' : mode);
                }
                const circles = document.querySelectorAll('.bubble-circle');
                circles.forEach(c => c.classList.add('navbar-expanded'));
            } else {
                navbar.classList.remove('expanded');
                navbar.classList.add('collapsed');
                arrowIcon.innerHTML = '<polyline points="18 15 12 9 6 15"></polyline>';
                const circles = document.querySelectorAll('.bubble-circle');
                circles.forEach(c => c.classList.remove('navbar-expanded'));
            }
            updateCirclesPosition();
        }

        function filterContent(type) {
            currentFilter = type;
            const contentSections = document.querySelectorAll('.content-section');
            contentSections.forEach(section => section.style.display = 'none');
            
            switch(type) {
                case 'buses':
                    document.getElementById('busesContent').style.display = 'block';
                    if (userMarker && hasGeoPermission) {
                        const userLatLng = userMarker.getLatLng();
                        const nearest = findNearestLocations(userLatLng.lat, userLatLng.lng, allBuses, initialBusStops);
                        updateNearestDisplay(nearest.nearestStop, nearest.nearestBuses, nearest.nearbyStops);
                    }
                    break;
                case 'location':
                    document.getElementById('locationContent').style.display = 'block';
                    if (userMarker && hasGeoPermission) {
                        const userLatLng = userMarker.getLatLng();
                        const nearest = findNearestLocations(userLatLng.lat, userLatLng.lng, allBuses, initialBusStops);
                        updateNearestDisplay(nearest.nearestStop, nearest.nearestBuses, nearest.nearbyStops);
                    }
                    break;
                case 'ticket':
                    document.getElementById('ticketContent').style.display = 'block';
                    break;
            }
        }

        function showTicketForm(busNo, routeName, sourceStop) {
            const navbar = document.getElementById('bottomNavbar');
            if (navbar.classList.contains('collapsed')) {
                toggleNavbar('ticket');
            }
            filterContent('ticket');
            document.getElementById('ticketBusNo').value = busNo || '';
            document.getElementById('ticketRouteName').value = routeName || '';
            document.getElementById('ticketSourceStop').value = sourceStop || '';
            document.getElementById('ticketDropStop').value = '';
        }

        function toggleSideNavbar() {
            const sideNavbar = document.getElementById('sideNavbar');
            const overlay = document.getElementById('nearestBusOverlay');
            sideNavbar.classList.toggle('active');
            if (sideNavbar.classList.contains('active')) {
                overlay.classList.add('hamburger-active');
            } else {
                overlay.classList.remove('hamburger-active');
            }
        }

        let stream = null;
        async function openQRScanner() {
            const qrScanner = document.getElementById('qrScanner');
            const qrVideo = document.getElementById('qrVideo');

            try {
                stream = await navigator.mediaDevices.getUserMedia({
                    video: { facingMode: 'environment' }
                });
                qrVideo.srcObject = stream;
                qrScanner.classList.add('active');
            } catch (err) {
                console.error('Camera access error:', err);
                alert('Unable to access camera. Please check permissions.');
                qrScanner.classList.add('active'); // Show manual entry even if QR fails
            }
        }

        function closeQRScanner() {
            const qrScanner = document.getElementById('qrScanner');
            const qrVideo = document.getElementById('qrVideo');
            if (stream) {
                stream.getTracks().forEach(track => track.stop());
                stream = null;
            }
            qrVideo.srcObject = null;
            qrScanner.classList.remove('active');
        }

        function initializeLocation() {
            if (navigator.geolocation) {
                checkGeolocationPermission();
            } else {
                // Fallback to default location
                console.warn('Geolocation not supported, using default location');
                setDefaultLocation();
            }
        }

        function requestUserLocation(attempt = 1, maxAttempts = 3) {
            if (!navigator.geolocation) {
                console.error('Geolocation is not supported by your browser.');
                setDefaultLocation();
                return;
            }

            navigator.geolocation.getCurrentPosition(
                position => {
                    const lat = position.coords.latitude;
                    const lon = position.coords.longitude;

                    if (!userMarker) {
                        userMarker = L.marker([lat, lon], { icon: userIcon }).addTo(map);
                    } else {
                        userMarker.setLatLng([lat, lon]);
                    }
                    map.setView([lat, lon], 15);

                    hasGeoPermission = true;
                    const nearest = findNearestLocations(lat, lon, allBuses, initialBusStops);
                    updateNearestDisplay(nearest.nearestStop, nearest.nearestBuses, nearest.nearbyStops);
                },
                error => {
                    console.error('Geolocation error:', error);
                    if (attempt <= maxAttempts) {
                        switch (error.code) {
                            case error.PERMISSION_DENIED:
                                console.log('Location permission denied. Attempt:', attempt);
                                hasGeoPermission = false;
                                if (attempt === maxAttempts) {
                                    console.log('Location permission denied, using default location.');
                                    setDefaultLocation();
                                }
                                break;
                            case error.POSITION_UNAVAILABLE:
                                console.log('Location information is unavailable. Attempt:', attempt);
                                if (attempt === maxAttempts) {
                                    console.log('Location information is unavailable, using default location.');
                                    setDefaultLocation();
                                }
                                break;
                            case error.TIMEOUT:
                                console.log('Location request timed out. Retrying... Attempt:', attempt);
                                if (attempt < maxAttempts) {
                                    setTimeout(() => requestUserLocation(attempt + 1, maxAttempts), 2000);
                                } else {
                                    setDefaultLocation();
                                }
                                break;
                            default:
                                console.log('Unknown geolocation error. Attempt:', attempt);
                                if (attempt < maxAttempts) {
                                    setTimeout(() => requestUserLocation(attempt + 1, maxAttempts), 2000);
                                } else {
                                    console.log('Failed to get your location, using default location.');
                                    setDefaultLocation();
                                }
                                break;
                        }
                    }
                },
                { timeout: 10000, maximumAge: 0, enableHighAccuracy: true }
            );
        }

        function setDefaultLocation() {
            const defaultLat = 28.62053784632279;
            const defaultLon = 77.24801224417742;
            if (!userMarker) {
                userMarker = L.marker([defaultLat, defaultLon], { icon: userIcon }).addTo(map);
            } else {
                userMarker.setLatLng([defaultLat, defaultLon]);
            }
            map.setView([defaultLat, defaultLon], 15);
            hasGeoPermission = false;
            const nearest = findNearestLocations(defaultLat, defaultLon, allBuses, initialBusStops);
            updateNearestDisplay(nearest.nearestStop, nearest.nearestBuses, nearest.nearbyStops);
        }

        function checkGeolocationPermission() {
            if (navigator.permissions) {
                navigator.permissions.query({ name: 'geolocation' }).then(result => {
                    if (result.state === 'granted') {
                        hasGeoPermission = true;
                        requestUserLocation();
                    } else if (result.state === 'prompt') {
                        requestUserLocation();
                    } else {
                        hasGeoPermission = false;
                        setDefaultLocation();
                    }
                    result.onchange = () => {
                        hasGeoPermission = result.state === 'granted';
                        if (hasGeoPermission) requestUserLocation();
                        else setDefaultLocation();
                    };
                }).catch(err => {
                    console.error('Permissions API error:', err);
                    requestUserLocation();
                });
            } else {
                requestUserLocation();
            }
        }

        function showMapPage() {
            updateCirclesPosition();
            map.invalidateSize();
            if (hasGeoPermission) {
                requestUserLocation();
            } else {
                setDefaultLocation();
            }
        }

        function closeBookingModal() {
            document.getElementById('bookingModal').classList.remove('active');
            document.getElementById('ticketSourceStop').value = '';
            document.getElementById('ticketDropStop').value = '';
            document.getElementById('ticketBusNo').value = '';
            document.getElementById('ticketRouteName').value = '';
            filterContent('buses');
        }

        async function fetchAllStops() {
            try {
                const response = await fetch('/api/all-stops');
                if (!response.ok) throw new Error('Network response was not ok');
                allStops = await response.json();
            } catch (error) {
                console.error('Error fetching all stops:', error);
                allStops = <%- JSON.stringify(busStops) %> || [];
            }
        }

        function filterStops(query, dropdownId) {
            const dropdown = document.getElementById(dropdownId);
            const input = document.getElementById(dropdownId.replace('Dropdown', 'Stop'));
            if (!query) {
                dropdown.classList.remove('active');
                return;
            }
            const filteredStops = allStops.filter(stop =>
                stop.name.toLowerCase().includes(query.toLowerCase())
            ).slice(0, 10); // Limit to 10 suggestions for performance
            dropdown.innerHTML = '';
            filteredStops.forEach(stop => {
                const item = document.createElement('div');
                item.className = 'stop-item';
                item.textContent = stop.name;
                item.onclick = () => {
                    if (dropdownId === 'sourceStopDropdown') {
                        document.getElementById('ticketSourceStop').value = stop.name;
                    } else if (dropdownId === 'dropStopDropdown') {
                        document.getElementById('ticketDropStop').value = stop.name;
                    }
                    dropdown.classList.remove('active');
                };
                dropdown.appendChild(item);
            });
            if (filteredStops.length > 0) {
                dropdown.classList.add('active');
            } else {
                dropdown.classList.remove('active');
            }
        }

        document.getElementById('ticketSourceStop')?.addEventListener('input', (e) => {
            const query = e.target.value.trim();
            if (query.length >= 2) {
                filterStops(query, 'sourceStopDropdown');
            } else {
                document.getElementById('sourceStopDropdown').classList.remove('active');
            }
        });

        document.getElementById('ticketDropStop')?.addEventListener('input', (e) => {
            const query = e.target.value.trim();
            if (query.length >= 2) {
                filterStops(query, 'dropStopDropdown');
            } else {
                document.getElementById('dropStopDropdown').classList.remove('active');
            }
        });

        document.addEventListener('click', (e) => {
            const sourceStop = document.getElementById('ticketSourceStop');
            const sourceDropdown = document.getElementById('sourceStopDropdown');
            if (sourceStop && sourceStop.contains(e.target)) {
                // No need to call populateSourceStops here as filterStops handles it
            } else if (sourceDropdown && !sourceDropdown.contains(e.target)) {
                sourceDropdown.classList.remove('active');
            }

            const dropStop = document.getElementById('ticketDropStop');
            const dropDropdown = document.getElementById('dropStopDropdown');
            if (dropStop && !dropStop.contains(e.target) && dropDropdown && !dropDropdown.contains(e.target)) {
                dropDropdown.classList.remove('active');
            }

            const qrScanner = document.getElementById('qrScanner');
            if (qrScanner && qrScanner.classList.contains('active') && !qrScanner.contains(e.target) && !e.target.closest('.qr-btn')) {
                closeQRScanner();
            }

            const nearestOverlay = document.getElementById('nearestBusOverlay');
            const nearestDropdown = document.getElementById('nearestBusDropdown');
            if (nearestOverlay && !nearestOverlay.contains(e.target) && nearestDropdown && nearestDropdown.contains(e.target)) {
            } else if (nearestOverlay && !nearestOverlay.contains(e.target) && nearestDropdown && nearestDropdown.classList.contains('active')) {
                nearestDropdown.classList.remove('active');
            }
        });

        function toggleNearestBusDropdown() {
            const dropdown = document.getElementById('nearestBusDropdown');
            if (!dropdown.classList.contains('active')) {
                const nearestStop = document.getElementById('nearestStopName').textContent;
                const content = nearestStops.slice(0, 4).map((stop, index) => `
                    <div class="nearest-bus-option" onclick="selectNearestStop('${stop.name}', ${index})">
                        ${stop.name} - ${(stop.distance / 1000).toFixed(2)} km
                    </div>
                `).join('');
                dropdown.innerHTML = content;
                dropdown.classList.add('active');
            } else {
                dropdown.classList.remove('active');
            }
        }

        function selectNearestStop(stopName, index) {
            document.getElementById('nearestStopName').textContent = stopName;
            document.getElementById('nearestBusStop').textContent = stopName;
            document.getElementById('nearestBusDropdown').classList.remove('active');
            showTicketForm('', '', stopName);
        }

        function selectBusNumber(busNumber) {
            document.getElementById('ticketBusNo').value = busNumber;
            closeQRScanner();
            showTicketForm(busNumber, '', document.getElementById('ticketSourceStop').value || document.getElementById('nearestStopName').textContent);
        }

        function submitBusNumber() {
            const num1 = document.getElementById('num1').value;
            const num2 = document.getElementById('num2').value;
            const num3 = document.getElementById('num3').value;
            const num4 = document.getElementById('num4').value;
            const busNumber = `${num1}${num2}${num3}${num4}`.replace(/[^0-9]/g, '');
            if (busNumber.length === 4) {
                document.getElementById('ticketBusNo').value = `DL${busNumber}`;
                closeQRScanner();
                showTicketForm(`DL${busNumber}`, '', document.getElementById('ticketSourceStop').value || document.getElementById('nearestStopName').textContent);
            } else {
                alert('Please enter a 4-digit number.');
            }
        }

        // Auto-focus next input
        ['num1', 'num2', 'num3', 'num4'].forEach((id, index) => {
            const input = document.getElementById(id);
            input.addEventListener('input', () => {
                if (input.value.length === input.maxLength && index < 3) {
                    document.getElementById(['num2', 'num3', 'num4', ''][index + 1]).focus();
                }
            });
        });

        const socket = io();
        socket.on('connect', () => {
            console.log('Connected to server');
            map.on('zoomend', () => socket.emit('zoomLevel', map.getZoom()));
            socket.emit('zoomLevel', map.getZoom());
        });

        socket.on('busUpdate', data => {
            console.log('Received bus update:', data);
            updateBusMarkers(data.buses, initialBusStops);
            if (data.busStops && data.busStops.length > 0) {
                updateBusStopMarkers(data.busStops);
            }
            if (userMarker && (hasGeoPermission || !navigator.geolocation)) {
                const userLatLng = userMarker.getLatLng();
                const nearest = findNearestLocations(userLatLng.lat, userLatLng.lng, data.buses, initialBusStops);
                updateNearestDisplay(nearest.nearestStop, nearest.nearestBuses, nearest.nearbyStops);
            }
        });

        updateBusMarkers(initialBuses, initialBusStops);
        if (initialBusStops.length > 0 && map.getZoom() >= ZOOM_THRESHOLD) {
            updateBusStopMarkers(initialBusStops);
        }
        showMapPage();
    </script>
</body>
</html>